import { dbConnect } from '../lib/db.js';
import dotenv from 'dotenv';
dotenv.config();

const MAX_GAME_DURATION_HOURS = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –≤ —á–∞—Å–∞—Ö

async function autoCloseOldGames() {
  try {
    await dbConnect();
    const { fixturesCol } = await import('../lib/db.js');
    const fixtures = await fixturesCol();
    
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä...');
    console.log(`‚è∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã: ${MAX_GAME_DURATION_HOURS} —á–∞—Å–∞`);
    
    const now = Date.now();
    const maxGameDuration = MAX_GAME_DURATION_HOURS * 60 * 60 * 1000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ LIVE –∏–≥—Ä—ã
    const liveGames = await fixtures.find({ status: 'LIVE' }).toArray();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${liveGames.length} LIVE –∏–≥—Ä`);
    
    let closedCount = 0;
    let skippedCount = 0;
    
    for (const game of liveGames) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ startTs
        if (!game.startTs) {
          console.log(`  ‚ö†Ô∏è –ò–≥—Ä–∞ ${game.fixtureId} (${game.home} vs ${game.away}) - –Ω–µ—Ç startTs, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          skippedCount++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏–≥—Ä—ã
        const gameStartTime = typeof game.startTs === 'number' ? game.startTs : new Date(game.startTs).getTime();
        const gameAge = now - gameStartTime;
        
        if (gameAge > maxGameDuration) {
          // –ò–≥—Ä–∞ –∏–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
          console.log(`  üî¥ –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É ${game.fixtureId} (${game.home} vs ${game.away})`);
          console.log(`     - –í–æ–∑—Ä–∞—Å—Ç: ${Math.round(gameAge / (60 * 60 * 1000))}—á`);
          console.log(`     - –ù–∞—á–∞–ª–∞—Å—å: ${new Date(gameStartTime).toISOString()}`);
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—á–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Å—Ç–∞–≤–∏–º 0:0
          const finalScore = game.score && game.score.home !== null && game.score.away !== null 
            ? game.score 
            : { home: 0, away: 0 };
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
          await fixtures.updateOne(
            { fixtureId: game.fixtureId },
            {
              $set: {
                status: 'FT',
                score: finalScore,
                finishedAt: new Date(),
                autoClosed: true,
                autoClosedAt: new Date(),
                autoClosedReason: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ—Å–ª–µ ${MAX_GAME_DURATION_HOURS} —á–∞—Å–æ–≤`
              }
            }
          );
          
          console.log(`     ‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ FT, —Å—á–µ—Ç: ${finalScore.home}:${finalScore.away}`);
          closedCount++;
          
        } else {
          // –ò–≥—Ä–∞ –µ—â–µ –∏–¥–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
          const remainingTime = maxGameDuration - gameAge;
          console.log(`  üü¢ –ò–≥—Ä–∞ ${game.fixtureId} (${game.home} vs ${game.away}) - –µ—â–µ –∏–¥–µ—Ç, –æ—Å—Ç–∞–ª–æ—Å—å ${Math.round(remainingTime / (60 * 1000))} –º–∏–Ω`);
          skippedCount++;
        }
        
      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä—ã ${game.fixtureId}:`, error);
        skippedCount++;
      }
    }
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log(`  - –í—Å–µ–≥–æ LIVE –∏–≥—Ä: ${liveGames.length}`);
    console.log(`  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ: ${closedCount}`);
    console.log(`  - –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
    
    if (closedCount > 0) {
      console.log('\nüí° –ó–∞–∫—Ä—ã—Ç—ã–µ –∏–≥—Ä—ã —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –±–æ—Ç–æ–º:');
      console.log(`   1. –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –∏—Ö –≤ finalizeFinishedGames()`);
      console.log(`   2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–æ—Å—Ç–∏—Ç—å—Å—è –≤ Discord`);
      console.log(`   3. –ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞ TTL –∏–Ω–¥–µ–∫—Å —É–¥–∞–ª–∏—Ç –∏—Ö –∏–∑ –±–∞–∑—ã`);
    }
    
    return { closedCount, skippedCount };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–≥—Ä:', error);
    throw error;
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  autoCloseOldGames().then((result) => {
    console.log('\nüèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  }).catch(error => {
    console.error('\nüí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });
}

export { autoCloseOldGames };
