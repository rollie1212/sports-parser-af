import { dbConnect } from '../lib/db.js';
import dotenv from 'dotenv';
dotenv.config();

async function checkUserStatsImpact() {
  try {
    await dbConnect();
    const { predictionsCol, threadsCol } = await import('../lib/db.js');
    const predictions = await predictionsCol();
    const threads = await threadsCol();
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∏—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞ userStats...');
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É Leicester vs Birmingham
    const thread = await threads.findOne({ fixtureId: 1386587 });
    if (!thread) {
      console.log('‚ùå –¢—Ä–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üìä –ò–≥—Ä–∞:', thread.title);
    console.log('‚öΩ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç:', JSON.stringify(thread.finalScore));
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
    const gamePredictions = await predictions.find({ threadId: thread.threadId }).toArray();
    console.log(`üìù –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: ${gamePredictions.length}`);
    
    // –°—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ —Å—Ç–∞—Ä—ã–º —Å—á–µ—Ç–æ–º (1:0)
    const oldCorrectPredictions = gamePredictions.filter(p => 
      p.scoreHome === 1 && p.scoreAway === 0
    );
    
    // –°—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –Ω–æ–≤—ã–º —Å—á–µ—Ç–æ–º (2:0)
    const newCorrectPredictions = gamePredictions.filter(p => 
      p.scoreHome === 2 && p.scoreAway === 0
    );
    
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:');
    console.log(`  - –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç–∞ 1:0: ${oldCorrectPredictions.length}`);
    console.log(`  - –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç–∞ 2:0: ${newCorrectPredictions.length}`);
    
    if (oldCorrectPredictions.length !== newCorrectPredictions.length) {
      console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: userStats –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å!');
      console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å');
      console.log('   - –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–∏–ª–∞—Å—å');
      console.log('   - –ù—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å !admin update-stats');
    } else {
      console.log('\n‚úÖ userStats –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    if (oldCorrectPredictions.length !== newCorrectPredictions.length) {
      console.log('\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —á—å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å:');
      
      const oldUserIds = new Set(oldCorrectPredictions.map(p => p.userId));
      const newUserIds = new Set(newCorrectPredictions.map(p => p.userId));
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–ª—è 1:0, –Ω–æ –Ω–µ –¥–ª—è 2:0
      const lostCorrect = Array.from(oldUserIds).filter(id => !newUserIds.has(id));
      if (lostCorrect.length > 0) {
        console.log(`  ‚ùå –ü–æ—Ç–µ—Ä—è–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å (${lostCorrect.length}):`);
        lostCorrect.slice(0, 5).forEach(id => console.log(`    - ${id}`));
      }
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–ª—è 2:0
      const gainedCorrect = Array.from(newUserIds).filter(id => !oldUserIds.has(id));
      if (gainedCorrect.length > 0) {
        console.log(`  ‚úÖ –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å (${gainedCorrect.length}):`);
        gainedCorrect.slice(0, 5).forEach(id => console.log(`    - ${id}`));
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

checkUserStatsImpact();
